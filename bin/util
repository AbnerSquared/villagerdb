#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const elasticsearch = require('elasticsearch');

function usage() {
    console.error('Usage: bin/util <command>');
    process.exit(1);
}

async function deleteSearchIndex() {
    const es = new elasticsearch.Client();

    // Empty out elasticsearch index
    return es.indices.delete({
        index: 'villager'
    })
}

async function buildSearchIndex() {
    const es = new elasticsearch.Client();

    await es.indices.create({
        index: 'villager'
    });

    const files = fs.readdirSync(path.join('data', 'villagers'));
    for (let file of files) {
        const data = fs.readFileSync(path.join('data', 'villagers', file), 'utf8');
        const parsed = JSON.parse(data);
        await es.index({
            index: 'villager',
            id: parsed.id,
            body: {
                'name': parsed.name
            }
        });
        console.log('Indexed ' + parsed.id);
    }
}

if (process.argv.length !== 3) {
    usage();
}

const command = process.argv[2];
if (!command) {
    usage();
} else if (command === 'delete-search-index') {
    deleteSearchIndex()
        .catch((e) => {
        }) // doesn't matter that it failed to delete
        .then(() => {
            console.log('Deleted villager index.');
        });
} else if (command === 'build-search-index') {
    buildSearchIndex()
        .catch((e) => {
            console.log('Failed to build search index.');
            console.error(e);
        })
        .then(() => {
            console.log('Built search index successfully.');
        });
} else {
    console.error('Valid commands: delete-search-index, build-search-index');
    process.exit(1);
}